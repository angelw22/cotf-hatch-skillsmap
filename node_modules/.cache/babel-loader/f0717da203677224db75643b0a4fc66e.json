{"ast":null,"code":"var _jsxFileName = \"/Users/angel/Documents/skills_map/src/components/diagram2.js\";\nimport React from 'react';\nimport * as go from 'gojs';\nvar MINLENGTH = 200; // this controls the minimum length of any swimlane\n\nvar MINBREADTH = 20; // this controls the minimum breadth of any non-collapsed swimlane\n\nlet myDiagram;\n\nclass MyDiagram extends React.Componenet {\n  constructor(props) {\n    super(props);\n    this.relayoutLanes = this.relayoutLanes.bind(this);\n    this.relayoutDiagram = this.relayoutDiagram.bind(this);\n    this.computeMinPoolSize = this.computeMinPoolSize.bind(this);\n    this.computeLaneSize = this.computeLaneSize.bind(this);\n    this.computeMinLaneSize = this.computeMinLaneSize.bind(this);\n    this.init = this.init.bind(this);\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"'hello'\");\n  }\n\n  relayoutLanes() {\n    myDiagram.nodes.each(function (lane) {\n      if (!(lane instanceof go.Group)) return;\n      if (lane.category === \"Pool\") return;\n      lane.layout.isValidLayout = false; // force it to be invalid\n    });\n    myDiagram.layoutDiagram();\n  }\n\n  relayoutDiagram() {\n    myDiagram.layout.invalidateLayout();\n    myDiagram.findTopLevelGroups().each(function (g) {\n      if (g.category === \"Pool\") g.layout.invalidateLayout();\n    });\n    myDiagram.layoutDiagram();\n  }\n\n  computeMinPoolSize(pool) {\n    // assert(pool instanceof go.Group && pool.category === \"Pool\");\n    var len = MINLENGTH;\n    pool.memberParts.each(function (lane) {\n      // pools ought to only contain lanes, not plain Nodes\n      if (!(lane instanceof go.Group)) return;\n      var holder = lane.placeholder;\n\n      if (holder !== null) {\n        var sz = holder.actualBounds;\n        len = Math.max(len, sz.height);\n      }\n    });\n    return new go.Size(NaN, len);\n  }\n\n  computeLaneSize(lane) {\n    // assert(lane instanceof go.Group && lane.category !== \"Pool\");\n    var sz = computeMinLaneSize(lane);\n\n    if (lane.isSubGraphExpanded) {\n      var holder = lane.placeholder;\n\n      if (holder !== null) {\n        var hsz = holder.actualBounds;\n        sz.width = Math.max(sz.width, hsz.width);\n      }\n    } // minimum breadth needs to be big enough to hold the header\n\n\n    var hdr = lane.findObject(\"HEADER\");\n    if (hdr !== null) sz.width = Math.max(sz.width, hdr.actualBounds.width);\n    return sz;\n  } // determine the minimum size of a Lane Group, even if collapsed\n\n\n  computeMinLaneSize(lane) {\n    if (!lane.isSubGraphExpanded) return new go.Size(1, MINLENGTH);\n    return new go.Size(MINBREADTH, MINLENGTH);\n  }\n\n  init() {\n    if (window.goSamples) goSamples(); // init for these samples -- you don't need to call this\n\n    var $ = go.GraphObject.make;\n    myDiagram = $(go.Diagram, \"myDiagramDiv\", {\n      // use a custom ResizingTool (along with a custom ResizeAdornment on each Group)\n      resizingTool: new LaneResizingTool(),\n      // use a simple layout that ignores links to stack the top-level Pool Groups next to each other\n      layout: $(PoolLayout),\n      // don't allow dropping onto the diagram's background unless they are all Groups (lanes or pools)\n      mouseDragOver: function (e) {\n        if (!e.diagram.selection.all(function (n) {\n          return n instanceof go.Group;\n        })) {\n          e.diagram.currentCursor = 'not-allowed';\n        }\n      },\n      mouseDrop: function (e) {\n        if (!e.diagram.selection.all(function (n) {\n          return n instanceof go.Group;\n        })) {\n          e.diagram.currentTool.doCancel();\n        }\n      },\n      // a clipboard copied node is pasted into the original node's group (i.e. lane).\n      \"commandHandler.copiesGroupKey\": true,\n      // automatically re-layout the swim lanes after dragging the selection\n      \"SelectionMoved\": relayoutDiagram,\n      // this DiagramEvent listener is\n      \"SelectionCopied\": relayoutDiagram,\n      // defined above\n      \"animationManager.isEnabled\": false,\n      // enable undo & redo\n      \"undoManager.isEnabled\": true\n    }); // this is a Part.dragComputation function for limiting where a Node may be dragged\n\n    function stayInGroup(part, pt, gridpt) {\n      // don't constrain top-level nodes\n      var grp = part.containingGroup;\n      if (grp === null) return pt; // try to stay within the background Shape of the Group\n\n      var back = grp.resizeObject;\n      if (back === null) return pt; // allow dragging a Node out of a Group if the Shift key is down\n\n      if (part.diagram.lastInput.shift) return pt;\n      var p1 = back.getDocumentPoint(go.Spot.TopLeft);\n      var p2 = back.getDocumentPoint(go.Spot.BottomRight);\n      var b = part.actualBounds;\n      var loc = part.location; // find the padding inside the group's placeholder that is around the member parts\n\n      var m = grp.placeholder.padding; // now limit the location appropriately\n\n      var x = Math.max(p1.x + m.left, Math.min(pt.x, p2.x - m.right - b.width - 1)) + (loc.x - b.x);\n      var y = Math.max(p1.y + m.top, Math.min(pt.y, p2.y - m.bottom - b.height - 1)) + (loc.y - b.y);\n      return new go.Point(x, y);\n    }\n\n    myDiagram.nodeTemplate = $(go.Node, \"Auto\", new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, \"Rectangle\", {\n      fill: \"white\",\n      portId: \"\",\n      cursor: \"pointer\",\n      fromLinkable: true,\n      toLinkable: true\n    }), $(go.TextBlock, {\n      margin: 5\n    }, new go.Binding(\"text\", \"key\")), {\n      dragComputation: stayInGroup\n    } // limit dragging of Nodes to stay within the containing Group, defined above\n    );\n\n    function groupStyle() {\n      // common settings for both Lane and Pool Groups\n      return [{\n        layerName: \"Background\",\n        // all pools and lanes are always behind all nodes and links\n        background: \"transparent\",\n        // can grab anywhere in bounds\n        movable: true,\n        // allows users to re-order by dragging\n        copyable: false,\n        // can't copy lanes or pools\n        avoidable: false,\n        // don't impede AvoidsNodes routed Links\n        minLocation: new go.Point(-Infinity, NaN),\n        // only allow horizontal movement\n        maxLocation: new go.Point(Infinity, NaN)\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify)];\n    } // hide links between lanes when either lane is collapsed\n\n\n    function updateCrossLaneLinks(group) {\n      group.findExternalLinksConnected().each(function (l) {\n        l.visible = l.fromNode.isVisible() && l.toNode.isVisible();\n      });\n    } // each Group is a \"swimlane\" with a header on the left and a resizable lane on the right\n\n\n    myDiagram.groupTemplate = $(go.Group, \"Vertical\", groupStyle(), {\n      selectionObjectName: \"SHAPE\",\n      // selecting a lane causes the body of the lane to be highlit, not the label\n      resizable: true,\n      resizeObjectName: \"SHAPE\",\n      // the custom resizeAdornmentTemplate only permits two kinds of resizing\n      layout: $(go.LayeredDigraphLayout, // automatically lay out the lane's subgraph\n      {\n        isInitial: false,\n        // don't even do initial layout\n        isOngoing: false,\n        // don't invalidate layout when nodes or links are added or removed\n        direction: 90,\n        columnSpacing: 10,\n        layeringOption: go.LayeredDigraphLayout.LayerLongestPathSource\n      }),\n      computesBoundsAfterDrag: true,\n      // needed to prevent recomputing Group.placeholder bounds too soon\n      computesBoundsIncludingLinks: false,\n      // to reduce occurrences of links going briefly outside the lane\n      computesBoundsIncludingLocation: true,\n      // to support empty space at top-left corner of lane\n      handlesDragDropForMembers: true,\n      // don't need to define handlers on member Nodes and Links\n      mouseDrop: function (e, grp) {\n        // dropping a copy of some Nodes and Links onto this Group adds them to this Group\n        if (!e.shift) return; // cannot change groups with an unmodified drag-and-drop\n        // don't allow drag-and-dropping a mix of regular Nodes and Groups\n\n        if (!e.diagram.selection.any(function (n) {\n          return n instanceof go.Group;\n        })) {\n          var ok = grp.addMembers(grp.diagram.selection, true);\n\n          if (ok) {\n            updateCrossLaneLinks(grp);\n          } else {\n            grp.diagram.currentTool.doCancel();\n          }\n        } else {\n          e.diagram.currentTool.doCancel();\n        }\n      },\n      subGraphExpandedChanged: function (grp) {\n        var shp = grp.resizeObject;\n        if (grp.diagram.undoManager.isUndoingRedoing) return;\n\n        if (grp.isSubGraphExpanded) {\n          shp.width = grp._savedBreadth;\n        } else {\n          grp._savedBreadth = shp.width;\n          shp.width = NaN;\n        }\n\n        updateCrossLaneLinks(grp);\n      }\n    }, new go.Binding(\"isSubGraphExpanded\", \"expanded\").makeTwoWay(), // the lane header consisting of a Shape and a TextBlock\n    $(go.Panel, \"Horizontal\", {\n      name: \"HEADER\",\n      angle: 0,\n      // maybe rotate the header to read sideways going up\n      alignment: go.Spot.Center\n    }, $(go.Panel, \"Horizontal\", // this is hidden when the swimlane is collapsed\n    new go.Binding(\"visible\", \"isSubGraphExpanded\").ofObject(), $(go.Shape, \"Diamond\", {\n      width: 8,\n      height: 8,\n      fill: \"white\"\n    }, new go.Binding(\"fill\", \"color\")), $(go.TextBlock, // the lane label\n    {\n      font: \"bold 13pt sans-serif\",\n      editable: true,\n      margin: new go.Margin(2, 0, 0, 0)\n    }, new go.Binding(\"text\", \"text\").makeTwoWay())), $(\"SubGraphExpanderButton\", {\n      margin: 5\n    }) // but this remains always visible!\n    ), // end Horizontal Panel\n    $(go.Panel, \"Auto\", // the lane consisting of a background Shape and a Placeholder representing the subgraph\n    $(go.Shape, \"Rectangle\", // this is the resized object\n    {\n      name: \"SHAPE\",\n      fill: \"white\"\n    }, new go.Binding(\"fill\", \"color\"), new go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify)), $(go.Placeholder, {\n      padding: 12,\n      alignment: go.Spot.TopLeft\n    }), $(go.TextBlock, // this TextBlock is only seen when the swimlane is collapsed\n    {\n      name: \"LABEL\",\n      font: \"bold 13pt sans-serif\",\n      editable: true,\n      angle: 90,\n      alignment: go.Spot.TopLeft,\n      margin: new go.Margin(4, 0, 0, 2)\n    }, new go.Binding(\"visible\", \"isSubGraphExpanded\", function (e) {\n      return !e;\n    }).ofObject(), new go.Binding(\"text\", \"text\").makeTwoWay())) // end Auto Panel\n    ); // end Group\n    // define a custom resize adornment that has two resize handles if the group is expanded\n\n    myDiagram.groupTemplate.resizeAdornmentTemplate = $(go.Adornment, \"Spot\", $(go.Placeholder), $(go.Shape, // for changing the length of a lane\n    {\n      alignment: go.Spot.Bottom,\n      desiredSize: new go.Size(50, 7),\n      fill: \"lightblue\",\n      stroke: \"dodgerblue\",\n      cursor: \"row-resize\"\n    }, new go.Binding(\"visible\", \"\", function (ad) {\n      if (ad.adornedPart === null) return false;\n      return ad.adornedPart.isSubGraphExpanded;\n    }).ofObject()), $(go.Shape, // for changing the breadth of a lane\n    {\n      alignment: go.Spot.Right,\n      desiredSize: new go.Size(7, 50),\n      fill: \"lightblue\",\n      stroke: \"dodgerblue\",\n      cursor: \"col-resize\"\n    }, new go.Binding(\"visible\", \"\", function (ad) {\n      if (ad.adornedPart === null) return false;\n      return ad.adornedPart.isSubGraphExpanded;\n    }).ofObject()));\n    myDiagram.groupTemplateMap.add(\"Pool\", $(go.Group, \"Auto\", groupStyle(), {\n      // use a simple layout that ignores links to stack the \"lane\" Groups next to each other\n      layout: $(PoolLayout, {\n        spacing: new go.Size(0, 0)\n      }) // no space between lanes\n\n    }, $(go.Shape, {\n      fill: \"white\"\n    }, new go.Binding(\"fill\", \"color\")), $(go.Panel, \"Table\", {\n      defaultRowSeparatorStroke: \"black\"\n    }, $(go.Panel, \"Horizontal\", {\n      row: 0,\n      angle: 0\n    }, $(go.TextBlock, {\n      font: \"bold 16pt sans-serif\",\n      editable: true,\n      margin: new go.Margin(2, 0, 0, 0)\n    }, new go.Binding(\"text\").makeTwoWay())), $(go.Placeholder, {\n      row: 1\n    }))));\n    myDiagram.linkTemplate = $(go.Link, {\n      routing: go.Link.AvoidsNodes,\n      corner: 5\n    }, {\n      relinkableFrom: true,\n      relinkableTo: true\n    }, $(go.Shape), $(go.Shape, {\n      toArrow: \"Standard\"\n    })); // define some sample graphs in some of the lanes\n\n    myDiagram.model = new go.GraphLinksModel([// node data\n    {\n      key: \"Pool1\",\n      text: \"Pool\",\n      isGroup: true,\n      category: \"Pool\"\n    }, {\n      key: \"Pool2\",\n      text: \"Pool2\",\n      isGroup: true,\n      category: \"Pool\"\n    }, {\n      key: \"Lane1\",\n      text: \"Lane1\",\n      isGroup: true,\n      group: \"Pool1\",\n      color: \"lightblue\"\n    }, {\n      key: \"Lane2\",\n      text: \"Lane2\",\n      isGroup: true,\n      group: \"Pool1\",\n      color: \"lightgreen\"\n    }, {\n      key: \"Lane3\",\n      text: \"Lane3\",\n      isGroup: true,\n      group: \"Pool1\",\n      color: \"lightyellow\"\n    }, {\n      key: \"Lane4\",\n      text: \"Lane4\",\n      isGroup: true,\n      group: \"Pool1\",\n      color: \"orange\"\n    }, {\n      key: \"oneA\",\n      group: \"Lane1\"\n    }, {\n      key: \"oneB\",\n      group: \"Lane1\"\n    }, {\n      key: \"oneC\",\n      group: \"Lane1\"\n    }, {\n      key: \"oneD\",\n      group: \"Lane1\"\n    }, {\n      key: \"twoA\",\n      group: \"Lane2\"\n    }, {\n      key: \"twoB\",\n      group: \"Lane2\"\n    }, {\n      key: \"twoC\",\n      group: \"Lane2\"\n    }, {\n      key: \"twoD\",\n      group: \"Lane2\"\n    }, {\n      key: \"twoE\",\n      group: \"Lane2\"\n    }, {\n      key: \"twoF\",\n      group: \"Lane2\"\n    }, {\n      key: \"twoG\",\n      group: \"Lane2\"\n    }, {\n      key: \"fourA\",\n      group: \"Lane4\"\n    }, {\n      key: \"fourB\",\n      group: \"Lane4\"\n    }, {\n      key: \"fourC\",\n      group: \"Lane4\"\n    }, {\n      key: \"fourD\",\n      group: \"Lane4\"\n    }, {\n      key: \"Lane5\",\n      text: \"Lane5\",\n      isGroup: true,\n      group: \"Pool2\",\n      color: \"lightyellow\"\n    }, {\n      key: \"Lane6\",\n      text: \"Lane6\",\n      isGroup: true,\n      group: \"Pool2\",\n      color: \"lightgreen\"\n    }, {\n      key: \"fiveA\",\n      group: \"Lane5\"\n    }, {\n      key: \"sixA\",\n      group: \"Lane6\"\n    }], [// link data\n    {\n      from: \"oneA\",\n      to: \"oneB\"\n    }, {\n      from: \"oneA\",\n      to: \"oneC\"\n    }, {\n      from: \"oneB\",\n      to: \"oneD\"\n    }, {\n      from: \"oneC\",\n      to: \"oneD\"\n    }, {\n      from: \"twoA\",\n      to: \"twoB\"\n    }, {\n      from: \"twoA\",\n      to: \"twoC\"\n    }, {\n      from: \"twoA\",\n      to: \"twoF\"\n    }, {\n      from: \"twoB\",\n      to: \"twoD\"\n    }, {\n      from: \"twoC\",\n      to: \"twoD\"\n    }, {\n      from: \"twoD\",\n      to: \"twoG\"\n    }, {\n      from: \"twoE\",\n      to: \"twoG\"\n    }, {\n      from: \"twoF\",\n      to: \"twoG\"\n    }, {\n      from: \"fourA\",\n      to: \"fourB\"\n    }, {\n      from: \"fourB\",\n      to: \"fourC\"\n    }, {\n      from: \"fourC\",\n      to: \"fourD\"\n    }]); // force all lanes' layouts to be performed\n\n    relayoutLanes();\n  } // end init\n\n\n}\n\nexport default MyDiagram;","map":{"version":3,"sources":["/Users/angel/Documents/skills_map/src/components/diagram2.js"],"names":["React","go","MINLENGTH","MINBREADTH","myDiagram","MyDiagram","Componenet","constructor","props","relayoutLanes","bind","relayoutDiagram","computeMinPoolSize","computeLaneSize","computeMinLaneSize","init","componentDidMount","render","nodes","each","lane","Group","category","layout","isValidLayout","layoutDiagram","invalidateLayout","findTopLevelGroups","g","pool","len","memberParts","holder","placeholder","sz","actualBounds","Math","max","height","Size","NaN","isSubGraphExpanded","hsz","width","hdr","findObject","window","goSamples","$","GraphObject","make","Diagram","resizingTool","LaneResizingTool","PoolLayout","mouseDragOver","e","diagram","selection","all","n","currentCursor","mouseDrop","currentTool","doCancel","stayInGroup","part","pt","gridpt","grp","containingGroup","back","resizeObject","lastInput","shift","p1","getDocumentPoint","Spot","TopLeft","p2","BottomRight","b","loc","location","m","padding","x","left","min","right","y","top","bottom","Point","nodeTemplate","Node","Binding","parse","makeTwoWay","stringify","Shape","fill","portId","cursor","fromLinkable","toLinkable","TextBlock","margin","dragComputation","groupStyle","layerName","background","movable","copyable","avoidable","minLocation","Infinity","maxLocation","updateCrossLaneLinks","group","findExternalLinksConnected","l","visible","fromNode","isVisible","toNode","groupTemplate","selectionObjectName","resizable","resizeObjectName","LayeredDigraphLayout","isInitial","isOngoing","direction","columnSpacing","layeringOption","LayerLongestPathSource","computesBoundsAfterDrag","computesBoundsIncludingLinks","computesBoundsIncludingLocation","handlesDragDropForMembers","any","ok","addMembers","subGraphExpandedChanged","shp","undoManager","isUndoingRedoing","_savedBreadth","Panel","name","angle","alignment","Center","ofObject","font","editable","Margin","Placeholder","resizeAdornmentTemplate","Adornment","Bottom","desiredSize","stroke","ad","adornedPart","Right","groupTemplateMap","add","spacing","defaultRowSeparatorStroke","row","linkTemplate","Link","routing","AvoidsNodes","corner","relinkableFrom","relinkableTo","toArrow","model","GraphLinksModel","key","text","isGroup","color","from","to"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as go from 'gojs';\n\nvar MINLENGTH = 200;  // this controls the minimum length of any swimlane\nvar MINBREADTH = 20;  // this controls the minimum breadth of any non-collapsed swimlane\nlet myDiagram;\n\nclass MyDiagram extends React.Componenet {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.relayoutLanes = this.relayoutLanes.bind(this);\n\t\tthis.relayoutDiagram = this.relayoutDiagram.bind(this);\n\t\tthis.computeMinPoolSize = this.computeMinPoolSize.bind(this);\n\t\tthis.computeLaneSize = this.computeLaneSize.bind(this);\n\t\tthis.computeMinLaneSize = this.computeMinLaneSize.bind(this);\n\t\tthis.init = this.init.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.init();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t\t<div>'hello'</div>\n\t\t)\n\t}\n\trelayoutLanes() {\n\t\tmyDiagram.nodes.each(function(lane) {\n\t\t\tif (!(lane instanceof go.Group)) return;\n\t\t\tif (lane.category === \"Pool\") return;\n\t\t\tlane.layout.isValidLayout = false;  // force it to be invalid\n\t\t});\n\t\tmyDiagram.layoutDiagram();\n\t}\n\n\trelayoutDiagram() {\n\t\tmyDiagram.layout.invalidateLayout();\n\t\tmyDiagram.findTopLevelGroups().each(function(g) { if (g.category === \"Pool\") g.layout.invalidateLayout(); });\n\t\tmyDiagram.layoutDiagram();\n\t}\n\n\tcomputeMinPoolSize(pool) {\n\t\t// assert(pool instanceof go.Group && pool.category === \"Pool\");\n\t\tvar len = MINLENGTH;\n\t\tpool.memberParts.each(function(lane) {\n\t\t\t// pools ought to only contain lanes, not plain Nodes\n\t\t\tif (!(lane instanceof go.Group)) return;\n\t\t\tvar holder = lane.placeholder;\n\t\t\tif (holder !== null) {\n\t\t\t\tvar sz = holder.actualBounds;\n\t\t\t\tlen = Math.max(len, sz.height);\n\t\t\t}\n\t\t});\n\t\treturn new go.Size(NaN, len);\n\t}\n\n\tcomputeLaneSize(lane) {\n\t\t// assert(lane instanceof go.Group && lane.category !== \"Pool\");\n\t\tvar sz = computeMinLaneSize(lane);\n\t\tif (lane.isSubGraphExpanded) {\n\t\t\tvar holder = lane.placeholder;\n\t\t\tif (holder !== null) {\n\t\t\t\tvar hsz = holder.actualBounds;\n\t\t\t\tsz.width = Math.max(sz.width, hsz.width);\n\t\t\t}\n\t\t}\n\t\t// minimum breadth needs to be big enough to hold the header\n\t\tvar hdr = lane.findObject(\"HEADER\");\n\t\tif (hdr !== null) sz.width = Math.max(sz.width, hdr.actualBounds.width);\n\t\treturn sz;\n\t}\n\n\t// determine the minimum size of a Lane Group, even if collapsed\n\tcomputeMinLaneSize(lane) {\n\t\tif (!lane.isSubGraphExpanded) return new go.Size(1, MINLENGTH);\n\t\treturn new go.Size(MINBREADTH, MINLENGTH);\n\t}\n\n\tinit() {\n\t\tif (window.goSamples) goSamples();  // init for these samples -- you don't need to call this\n\t\tvar $ = go.GraphObject.make;\n\n\t\tmyDiagram =\n\t\t\t$(go.Diagram, \"myDiagramDiv\",\n\t\t\t\t{\n\t\t\t\t\t// use a custom ResizingTool (along with a custom ResizeAdornment on each Group)\n\t\t\t\t\tresizingTool: new LaneResizingTool(),\n\t\t\t\t\t// use a simple layout that ignores links to stack the top-level Pool Groups next to each other\n\t\t\t\t\tlayout: $(PoolLayout),\n\t\t\t\t\t// don't allow dropping onto the diagram's background unless they are all Groups (lanes or pools)\n\t\t\t\t\tmouseDragOver: function(e) {\n\t\t\t\t\t\tif (!e.diagram.selection.all(function(n) { return n instanceof go.Group; })) {\n\t\t\t\t\t\t\te.diagram.currentCursor = 'not-allowed';\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmouseDrop: function(e) {\n\t\t\t\t\t\tif (!e.diagram.selection.all(function(n) { return n instanceof go.Group; })) {\n\t\t\t\t\t\t\te.diagram.currentTool.doCancel();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t// a clipboard copied node is pasted into the original node's group (i.e. lane).\n\t\t\t\t\t\"commandHandler.copiesGroupKey\": true,\n\t\t\t\t\t// automatically re-layout the swim lanes after dragging the selection\n\t\t\t\t\t\"SelectionMoved\": relayoutDiagram,  // this DiagramEvent listener is\n\t\t\t\t\t\"SelectionCopied\": relayoutDiagram, // defined above\n\t\t\t\t\t\"animationManager.isEnabled\": false,\n\t\t\t\t\t// enable undo & redo\n\t\t\t\t\t\"undoManager.isEnabled\": true\n\t\t\t\t});\n\n\t\t// this is a Part.dragComputation function for limiting where a Node may be dragged\n\t\tfunction stayInGroup(part, pt, gridpt) {\n\t\t\t// don't constrain top-level nodes\n\t\t\tvar grp = part.containingGroup;\n\t\t\tif (grp === null) return pt;\n\t\t\t// try to stay within the background Shape of the Group\n\t\t\tvar back = grp.resizeObject;\n\t\t\tif (back === null) return pt;\n\t\t\t// allow dragging a Node out of a Group if the Shift key is down\n\t\t\tif (part.diagram.lastInput.shift) return pt;\n\t\t\tvar p1 = back.getDocumentPoint(go.Spot.TopLeft);\n\t\t\tvar p2 = back.getDocumentPoint(go.Spot.BottomRight);\n\t\t\tvar b = part.actualBounds;\n\t\t\tvar loc = part.location;\n\t\t\t// find the padding inside the group's placeholder that is around the member parts\n\t\t\tvar m = grp.placeholder.padding;\n\t\t\t// now limit the location appropriately\n\t\t\tvar x = Math.max(p1.x + m.left, Math.min(pt.x, p2.x - m.right - b.width - 1)) + (loc.x - b.x);\n\t\t\tvar y = Math.max(p1.y + m.top, Math.min(pt.y, p2.y - m.bottom - b.height - 1)) + (loc.y - b.y);\n\t\t\treturn new go.Point(x, y);\n\t\t}\n\n\t\tmyDiagram.nodeTemplate =\n\t\t\t$(go.Node, \"Auto\",\n\t\t\t\tnew go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\n\t\t\t\t$(go.Shape, \"Rectangle\",\n\t\t\t\t\t{ fill: \"white\", portId: \"\", cursor: \"pointer\", fromLinkable: true, toLinkable: true }),\n\t\t\t\t$(go.TextBlock, { margin: 5 },\n\t\t\t\t\tnew go.Binding(\"text\", \"key\")),\n\t\t\t\t{ dragComputation: stayInGroup } // limit dragging of Nodes to stay within the containing Group, defined above\n\t\t\t);\n\n\t\tfunction groupStyle() {  // common settings for both Lane and Pool Groups\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tlayerName: \"Background\",  // all pools and lanes are always behind all nodes and links\n\t\t\t\t\tbackground: \"transparent\",  // can grab anywhere in bounds\n\t\t\t\t\tmovable: true, // allows users to re-order by dragging\n\t\t\t\t\tcopyable: false,  // can't copy lanes or pools\n\t\t\t\t\tavoidable: false,  // don't impede AvoidsNodes routed Links\n\t\t\t\t\tminLocation: new go.Point(-Infinity, NaN),  // only allow horizontal movement\n\t\t\t\t\tmaxLocation: new go.Point(Infinity, NaN)\n\t\t\t\t},\n\t\t\t\tnew go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify)\n\t\t\t];\n\t\t}\n\n\t\t// hide links between lanes when either lane is collapsed\n\t\tfunction updateCrossLaneLinks(group) {\n\t\t\tgroup.findExternalLinksConnected().each(function(l) {\n\t\t\t\tl.visible = (l.fromNode.isVisible() && l.toNode.isVisible());\n\t\t\t});\n\t\t}\n\n\t\t// each Group is a \"swimlane\" with a header on the left and a resizable lane on the right\n\t\tmyDiagram.groupTemplate =\n\t\t\t$(go.Group, \"Vertical\", groupStyle(),\n\t\t\t\t{\n\t\t\t\t\tselectionObjectName: \"SHAPE\",  // selecting a lane causes the body of the lane to be highlit, not the label\n\t\t\t\t\tresizable: true, resizeObjectName: \"SHAPE\",  // the custom resizeAdornmentTemplate only permits two kinds of resizing\n\t\t\t\t\tlayout: $(go.LayeredDigraphLayout,  // automatically lay out the lane's subgraph\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisInitial: false,  // don't even do initial layout\n\t\t\t\t\t\t\tisOngoing: false,  // don't invalidate layout when nodes or links are added or removed\n\t\t\t\t\t\t\tdirection: 90,\n\t\t\t\t\t\t\tcolumnSpacing: 10,\n\t\t\t\t\t\t\tlayeringOption: go.LayeredDigraphLayout.LayerLongestPathSource\n\t\t\t\t\t\t}),\n\t\t\t\t\tcomputesBoundsAfterDrag: true,  // needed to prevent recomputing Group.placeholder bounds too soon\n\t\t\t\t\tcomputesBoundsIncludingLinks: false,  // to reduce occurrences of links going briefly outside the lane\n\t\t\t\t\tcomputesBoundsIncludingLocation: true,  // to support empty space at top-left corner of lane\n\t\t\t\t\thandlesDragDropForMembers: true,  // don't need to define handlers on member Nodes and Links\n\t\t\t\t\tmouseDrop: function(e, grp) {  // dropping a copy of some Nodes and Links onto this Group adds them to this Group\n\t\t\t\t\t\tif (!e.shift) return;  // cannot change groups with an unmodified drag-and-drop\n\t\t\t\t\t\t// don't allow drag-and-dropping a mix of regular Nodes and Groups\n\t\t\t\t\t\tif (!e.diagram.selection.any(function(n) { return n instanceof go.Group; })) {\n\t\t\t\t\t\t\tvar ok = grp.addMembers(grp.diagram.selection, true);\n\t\t\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t\t\tupdateCrossLaneLinks(grp);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgrp.diagram.currentTool.doCancel();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\te.diagram.currentTool.doCancel();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsubGraphExpandedChanged: function(grp) {\n\t\t\t\t\t\tvar shp = grp.resizeObject;\n\t\t\t\t\t\tif (grp.diagram.undoManager.isUndoingRedoing) return;\n\t\t\t\t\t\tif (grp.isSubGraphExpanded) {\n\t\t\t\t\t\t\tshp.width = grp._savedBreadth;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgrp._savedBreadth = shp.width;\n\t\t\t\t\t\t\tshp.width = NaN;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tupdateCrossLaneLinks(grp);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tnew go.Binding(\"isSubGraphExpanded\", \"expanded\").makeTwoWay(),\n\t\t\t\t// the lane header consisting of a Shape and a TextBlock\n\t\t\t\t$(go.Panel, \"Horizontal\",\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"HEADER\",\n\t\t\t\t\t\tangle: 0,  // maybe rotate the header to read sideways going up\n\t\t\t\t\t\talignment: go.Spot.Center\n\t\t\t\t\t},\n\t\t\t\t\t$(go.Panel, \"Horizontal\",  // this is hidden when the swimlane is collapsed\n\t\t\t\t\t\tnew go.Binding(\"visible\", \"isSubGraphExpanded\").ofObject(),\n\t\t\t\t\t\t$(go.Shape, \"Diamond\",\n\t\t\t\t\t\t\t{ width: 8, height: 8, fill: \"white\" },\n\t\t\t\t\t\t\tnew go.Binding(\"fill\", \"color\")),\n\t\t\t\t\t\t$(go.TextBlock,  // the lane label\n\t\t\t\t\t\t\t{ font: \"bold 13pt sans-serif\", editable: true, margin: new go.Margin(2, 0, 0, 0) },\n\t\t\t\t\t\t\tnew go.Binding(\"text\", \"text\").makeTwoWay())\n\t\t\t\t\t),\n\t\t\t\t\t$(\"SubGraphExpanderButton\", { margin: 5 })  // but this remains always visible!\n\t\t\t\t),  // end Horizontal Panel\n\t\t\t\t$(go.Panel, \"Auto\",  // the lane consisting of a background Shape and a Placeholder representing the subgraph\n\t\t\t\t\t$(go.Shape, \"Rectangle\",  // this is the resized object\n\t\t\t\t\t\t{ name: \"SHAPE\", fill: \"white\" },\n\t\t\t\t\t\tnew go.Binding(\"fill\", \"color\"),\n\t\t\t\t\t\tnew go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify)),\n\t\t\t\t\t$(go.Placeholder,\n\t\t\t\t\t\t{ padding: 12, alignment: go.Spot.TopLeft }),\n\t\t\t\t\t$(go.TextBlock,  // this TextBlock is only seen when the swimlane is collapsed\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"LABEL\",\n\t\t\t\t\t\t\tfont: \"bold 13pt sans-serif\", editable: true,\n\t\t\t\t\t\t\tangle: 90, alignment: go.Spot.TopLeft, margin: new go.Margin(4, 0, 0, 2)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnew go.Binding(\"visible\", \"isSubGraphExpanded\", function(e) { return !e; }).ofObject(),\n\t\t\t\t\t\tnew go.Binding(\"text\", \"text\").makeTwoWay())\n\t\t\t\t)  // end Auto Panel\n\t\t\t);  // end Group\n\n\t\t// define a custom resize adornment that has two resize handles if the group is expanded\n\t\tmyDiagram.groupTemplate.resizeAdornmentTemplate =\n\t\t\t$(go.Adornment, \"Spot\",\n\t\t\t\t$(go.Placeholder),\n\t\t\t\t$(go.Shape,  // for changing the length of a lane\n\t\t\t\t\t{\n\t\t\t\t\t\talignment: go.Spot.Bottom,\n\t\t\t\t\t\tdesiredSize: new go.Size(50, 7),\n\t\t\t\t\t\tfill: \"lightblue\", stroke: \"dodgerblue\",\n\t\t\t\t\t\tcursor: \"row-resize\"\n\t\t\t\t\t},\n\t\t\t\t\tnew go.Binding(\"visible\", \"\", function(ad) {\n\t\t\t\t\t\tif (ad.adornedPart === null) return false;\n\t\t\t\t\t\treturn ad.adornedPart.isSubGraphExpanded;\n\t\t\t\t\t}).ofObject()),\n\t\t\t\t$(go.Shape,  // for changing the breadth of a lane\n\t\t\t\t\t{\n\t\t\t\t\t\talignment: go.Spot.Right,\n\t\t\t\t\t\tdesiredSize: new go.Size(7, 50),\n\t\t\t\t\t\tfill: \"lightblue\", stroke: \"dodgerblue\",\n\t\t\t\t\t\tcursor: \"col-resize\"\n\t\t\t\t\t},\n\t\t\t\t\tnew go.Binding(\"visible\", \"\", function(ad) {\n\t\t\t\t\t\tif (ad.adornedPart === null) return false;\n\t\t\t\t\t\treturn ad.adornedPart.isSubGraphExpanded;\n\t\t\t\t\t}).ofObject())\n\t\t\t);\n\n\t\tmyDiagram.groupTemplateMap.add(\"Pool\",\n\t\t\t$(go.Group, \"Auto\", groupStyle(),\n\t\t\t\t{ // use a simple layout that ignores links to stack the \"lane\" Groups next to each other\n\t\t\t\t\tlayout: $(PoolLayout, { spacing: new go.Size(0, 0) })  // no space between lanes\n\t\t\t\t},\n\t\t\t\t$(go.Shape,\n\t\t\t\t\t{ fill: \"white\" },\n\t\t\t\t\tnew go.Binding(\"fill\", \"color\")),\n\t\t\t\t$(go.Panel, \"Table\",\n\t\t\t\t\t{ defaultRowSeparatorStroke: \"black\" },\n\t\t\t\t\t$(go.Panel, \"Horizontal\",\n\t\t\t\t\t\t{ row: 0, angle: 0 },\n\t\t\t\t\t\t$(go.TextBlock,\n\t\t\t\t\t\t\t{ font: \"bold 16pt sans-serif\", editable: true, margin: new go.Margin(2, 0, 0, 0) },\n\t\t\t\t\t\t\tnew go.Binding(\"text\").makeTwoWay())\n\t\t\t\t\t),\n\t\t\t\t\t$(go.Placeholder,\n\t\t\t\t\t\t{ row: 1 })\n\t\t\t\t)\n\t\t\t));\n\n\t\tmyDiagram.linkTemplate =\n\t\t\t$(go.Link,\n\t\t\t\t{ routing: go.Link.AvoidsNodes, corner: 5 },\n\t\t\t\t{ relinkableFrom: true, relinkableTo: true },\n\t\t\t\t$(go.Shape),\n\t\t\t\t$(go.Shape, { toArrow: \"Standard\" })\n\t\t\t);\n\n\t\t// define some sample graphs in some of the lanes\n\t\tmyDiagram.model = new go.GraphLinksModel(\n\t\t\t[ // node data\n\t\t\t\t{ key: \"Pool1\", text: \"Pool\", isGroup: true, category: \"Pool\" },\n\t\t\t\t{ key: \"Pool2\", text: \"Pool2\", isGroup: true, category: \"Pool\" },\n\t\t\t\t{ key: \"Lane1\", text: \"Lane1\", isGroup: true, group: \"Pool1\", color: \"lightblue\" },\n\t\t\t\t{ key: \"Lane2\", text: \"Lane2\", isGroup: true, group: \"Pool1\", color: \"lightgreen\" },\n\t\t\t\t{ key: \"Lane3\", text: \"Lane3\", isGroup: true, group: \"Pool1\", color: \"lightyellow\" },\n\t\t\t\t{ key: \"Lane4\", text: \"Lane4\", isGroup: true, group: \"Pool1\", color: \"orange\" },\n\t\t\t\t{ key: \"oneA\", group: \"Lane1\" },\n\t\t\t\t{ key: \"oneB\", group: \"Lane1\" },\n\t\t\t\t{ key: \"oneC\", group: \"Lane1\" },\n\t\t\t\t{ key: \"oneD\", group: \"Lane1\" },\n\t\t\t\t{ key: \"twoA\", group: \"Lane2\" },\n\t\t\t\t{ key: \"twoB\", group: \"Lane2\" },\n\t\t\t\t{ key: \"twoC\", group: \"Lane2\" },\n\t\t\t\t{ key: \"twoD\", group: \"Lane2\" },\n\t\t\t\t{ key: \"twoE\", group: \"Lane2\" },\n\t\t\t\t{ key: \"twoF\", group: \"Lane2\" },\n\t\t\t\t{ key: \"twoG\", group: \"Lane2\" },\n\t\t\t\t{ key: \"fourA\", group: \"Lane4\" },\n\t\t\t\t{ key: \"fourB\", group: \"Lane4\" },\n\t\t\t\t{ key: \"fourC\", group: \"Lane4\" },\n\t\t\t\t{ key: \"fourD\", group: \"Lane4\" },\n\t\t\t\t{ key: \"Lane5\", text: \"Lane5\", isGroup: true, group: \"Pool2\", color: \"lightyellow\" },\n\t\t\t\t{ key: \"Lane6\", text: \"Lane6\", isGroup: true, group: \"Pool2\", color: \"lightgreen\" },\n\t\t\t\t{ key: \"fiveA\", group: \"Lane5\" },\n\t\t\t\t{ key: \"sixA\", group: \"Lane6\" }\n\t\t\t],\n\t\t\t[ // link data\n\t\t\t\t{ from: \"oneA\", to: \"oneB\" },\n\t\t\t\t{ from: \"oneA\", to: \"oneC\" },\n\t\t\t\t{ from: \"oneB\", to: \"oneD\" },\n\t\t\t\t{ from: \"oneC\", to: \"oneD\" },\n\t\t\t\t{ from: \"twoA\", to: \"twoB\" },\n\t\t\t\t{ from: \"twoA\", to: \"twoC\" },\n\t\t\t\t{ from: \"twoA\", to: \"twoF\" },\n\t\t\t\t{ from: \"twoB\", to: \"twoD\" },\n\t\t\t\t{ from: \"twoC\", to: \"twoD\" },\n\t\t\t\t{ from: \"twoD\", to: \"twoG\" },\n\t\t\t\t{ from: \"twoE\", to: \"twoG\" },\n\t\t\t\t{ from: \"twoF\", to: \"twoG\" },\n\t\t\t\t{ from: \"fourA\", to: \"fourB\" },\n\t\t\t\t{ from: \"fourB\", to: \"fourC\" },\n\t\t\t\t{ from: \"fourC\", to: \"fourD\" }\n\t\t\t]);\n\t\t// force all lanes' layouts to be performed\n\t\trelayoutLanes();\n\t}  // end init\n}\n\nexport default MyDiagram;"]},"metadata":{},"sourceType":"module"}