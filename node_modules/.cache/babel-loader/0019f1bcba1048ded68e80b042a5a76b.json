{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar go = __importStar(require(\"gojs\"));\n\nvar modelChangedhandler_1 = require(\"./modelChangedhandler\");\n\nvar GojsDiagram =\n/** @class */\nfunction (_super) {\n  __extends(GojsDiagram, _super);\n\n  function GojsDiagram(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.modelChangedHandlers = [new modelChangedhandler_1.AddNodeModelChangedHandler(), new modelChangedhandler_1.AddLinkModelChangedHandler(), new modelChangedhandler_1.RemoveNodeModelChangedHandler(), new modelChangedhandler_1.RemoveLinkModelChangedHandler(), new modelChangedhandler_1.GroupNodeModelChangedHandler(), new modelChangedhandler_1.BeginTransactionHandler(), new modelChangedhandler_1.CommitTransactionHandler()];\n    _this.eventsToDispatch = [];\n    _this.modelChangedHandler = _this.modelChangedHandler.bind(_this);\n    return _this;\n  }\n\n  GojsDiagram.prototype.componentDidMount = function () {\n    this.init();\n  };\n\n  GojsDiagram.prototype.componentWillUnmount = function () {\n    if (this.props.onModelChange) {\n      this.myDiagram.removeModelChangedListener(this.modelChangedHandler);\n    }\n\n    this.myDiagram.clear();\n  };\n\n  GojsDiagram.prototype.componentDidUpdate = function () {\n    this.myDiagram.startTransaction();\n    this.applyAddRemoveLinksFromModel();\n    this.applyAddRemoveNodesFromModel();\n    this.applyUpdatesFromModel();\n\n    if (this.props.updateDiagramProps) {\n      this.props.updateDiagramProps(this.myDiagram);\n    }\n\n    this.myDiagram.updateAllRelationshipsFromData();\n    this.myDiagram.updateAllTargetBindings();\n    this.myDiagram.commitTransaction('updated');\n  };\n\n  GojsDiagram.prototype.init = function () {\n    var _a = this.props,\n        createDiagram = _a.createDiagram,\n        diagramId = _a.diagramId,\n        onModelChange = _a.onModelChange,\n        defaultSelectedNode = _a.defaultSelectedNode;\n    this.myDiagram = createDiagram(diagramId);\n\n    if (onModelChange) {\n      this.myDiagram.addModelChangedListener(this.modelChangedHandler);\n    }\n\n    this.myDiagram.model = go.GraphObject.make(go.GraphLinksModel, __assign({}, this.props.makeUniqueKeyFunction && {\n      makeUniqueKeyFunction: this.props.makeUniqueKeyFunction\n    }, {\n      linkFromPortIdProperty: this.props.linkFromPortIdProperty || '',\n      linkToPortIdProperty: this.props.linkToPortIdProperty || '',\n      nodeDataArray: this.props.model.nodeDataArray.slice(),\n      linkDataArray: this.props.model.linkDataArray.slice(),\n      nodeCategoryProperty: this.props.nodeCategoryProperty || 'category',\n      linkKeyProperty: this.props.linkKeyProperty || '',\n      makeUniqueLinkKeyFunction: this.props.makeUniqueLinkKeyFunction || null,\n      copyNodeDataFunction: this.props.copyNodeDataFunction || null\n    }));\n\n    if (defaultSelectedNode) {\n      this.myDiagram.select(this.myDiagram.findNodeForKey(defaultSelectedNode));\n    }\n  };\n\n  GojsDiagram.prototype.render = function () {\n    return React.createElement(\"div\", {\n      id: this.props.diagramId,\n      className: this.props.className\n    });\n  };\n\n  GojsDiagram.prototype.enqueueEvent = function (event) {\n    this.eventsToDispatch = this.eventsToDispatch.concat(event);\n  };\n\n  GojsDiagram.prototype.clear = function () {\n    this.eventsToDispatch = [];\n  };\n\n  GojsDiagram.prototype.dispatchAll = function () {\n    var _this = this;\n\n    this.eventsToDispatch.forEach(function (eventToDispatch) {\n      return _this.props.onModelChange(eventToDispatch);\n    });\n    this.eventsToDispatch = [];\n  };\n\n  GojsDiagram.prototype.modelChangedHandler = function (evt) {\n    var _this = this;\n\n    this.modelChangedHandlers.forEach(function (handler) {\n      if (handler.canHandle(evt)) {\n        handler.handle(evt, _this.props.model, _this);\n      }\n    });\n  };\n\n  GojsDiagram.prototype.applyAddRemoveNodesFromModel = function () {\n    var _this = this;\n\n    var nodesToAdd = this.props.model.nodeDataArray.filter(function (e) {\n      return _this.myDiagram.model.nodeDataArray.findIndex(function (el) {\n        return el.key === e.key;\n      }) === -1;\n    }).map(function (node) {\n      return Object.assign({}, node);\n    });\n    this.myDiagram.model.addNodeDataCollection(nodesToAdd);\n    var nodesToRemove = this.myDiagram.model.nodeDataArray.filter(function (e) {\n      return _this.props.model.nodeDataArray.findIndex(function (el) {\n        return el.key === e.key;\n      }) === -1;\n    });\n    this.myDiagram.model.removeNodeDataCollection(nodesToRemove);\n  };\n\n  GojsDiagram.prototype.applyAddRemoveLinksFromModel = function () {\n    var _this = this;\n\n    var linksToAdd = this.props.model.linkDataArray.filter(function (e) {\n      return _this.myDiagram.model.linkDataArray.findIndex(function (el) {\n        if (_this.props.linkKeyProperty && el[_this.props.linkKeyProperty] && e[_this.props.linkKeyProperty]) {\n          return el.from === e.from && el.to === e.to && el[_this.props.linkKeyProperty] === e[_this.props.linkKeyProperty];\n        }\n\n        return el.from === e.from && el.to === e.to;\n      }) === -1;\n    }).map(function (link) {\n      return Object.assign({}, link);\n    });\n    this.myDiagram.model.addLinkDataCollection(linksToAdd);\n    var linksToRemove = this.myDiagram.model.linkDataArray.filter(function (e) {\n      return _this.props.model.linkDataArray.findIndex(function (el) {\n        if (_this.props.linkKeyProperty && el[_this.props.linkKeyProperty] && e[_this.props.linkKeyProperty]) {\n          return el.from === e.from && el.to === e.to && el[_this.props.linkKeyProperty] === e[_this.props.linkKeyProperty];\n        }\n\n        return el.from === e.from && el.to === e.to;\n      }) === -1;\n    });\n    this.myDiagram.model.removeLinkDataCollection(linksToRemove);\n  };\n\n  GojsDiagram.prototype.applyUpdatesFromModel = function () {\n    this.myDiagram.model.applyIncrementalJson({\n      class: 'go.GraphLinksModel',\n      incremental: 1,\n      nodeKeyProperty: 'key',\n      linkKeyProperty: 'key',\n      linkFromPortIdProperty: this.props.linkFromPortIdProperty || '',\n      linkToPortIdProperty: this.props.linkToPortIdProperty || '',\n      modifiedNodeData: this.props.model.nodeDataArray,\n      modifiedLinkData: this.props.model.linkDataArray\n    });\n  };\n\n  return GojsDiagram;\n}(React.PureComponent);\n\nexports.default = GojsDiagram;","map":null,"metadata":{},"sourceType":"script"}