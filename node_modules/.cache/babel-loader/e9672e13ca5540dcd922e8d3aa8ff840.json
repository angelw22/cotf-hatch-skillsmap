{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gojs_1 = require(\"gojs\");\n\nvar modelChangeEvent_1 = require(\"./modelChangeEvent\");\n\nvar nodePropertyName = 'nodeDataArray';\nvar linkPropertyName = 'linkDataArray';\n\nvar AddNodeModelChangedHandler =\n/** @class */\nfunction () {\n  function AddNodeModelChangedHandler() {}\n\n  AddNodeModelChangedHandler.prototype.canHandle = function (evt) {\n    return evt.change === gojs_1.ChangedEvent.Insert && evt.propertyName === nodePropertyName;\n  };\n\n  AddNodeModelChangedHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    if (!model.nodeDataArray.some(function (el) {\n      return el.key === evt.newValue.key;\n    })) {\n      diagramNotificationDelegate.enqueueEvent({\n        eventType: modelChangeEvent_1.ModelChangeEventType.Add,\n        nodeData: __assign({}, evt.newValue),\n        model: getNewModel(evt)\n      });\n    }\n  };\n\n  return AddNodeModelChangedHandler;\n}();\n\nexports.AddNodeModelChangedHandler = AddNodeModelChangedHandler;\n\nvar AddLinkModelChangedHandler =\n/** @class */\nfunction () {\n  function AddLinkModelChangedHandler() {}\n\n  AddLinkModelChangedHandler.prototype.canHandle = function (evt) {\n    return evt.change === gojs_1.ChangedEvent.Insert && evt.propertyName === linkPropertyName;\n  };\n\n  AddLinkModelChangedHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    if (!model.linkDataArray.some(function (el) {\n      return el.from === evt.newValue.from && el.to === evt.newValue.to;\n    })) {\n      diagramNotificationDelegate.enqueueEvent({\n        eventType: modelChangeEvent_1.ModelChangeEventType.Add,\n        linkData: __assign({}, evt.newValue),\n        model: getNewModel(evt)\n      });\n    }\n  };\n\n  return AddLinkModelChangedHandler;\n}();\n\nexports.AddLinkModelChangedHandler = AddLinkModelChangedHandler;\n\nvar RemoveNodeModelChangedHandler =\n/** @class */\nfunction () {\n  function RemoveNodeModelChangedHandler() {}\n\n  RemoveNodeModelChangedHandler.prototype.canHandle = function (evt) {\n    return evt.change === gojs_1.ChangedEvent.Remove && evt.propertyName === nodePropertyName;\n  };\n\n  RemoveNodeModelChangedHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    if (model.nodeDataArray.some(function (el) {\n      return el.key === evt.oldValue.key;\n    })) {\n      diagramNotificationDelegate.enqueueEvent({\n        eventType: modelChangeEvent_1.ModelChangeEventType.Remove,\n        nodeData: __assign({}, evt.oldValue),\n        model: getNewModel(evt)\n      });\n    }\n  };\n\n  return RemoveNodeModelChangedHandler;\n}();\n\nexports.RemoveNodeModelChangedHandler = RemoveNodeModelChangedHandler;\n\nvar RemoveLinkModelChangedHandler =\n/** @class */\nfunction () {\n  function RemoveLinkModelChangedHandler() {}\n\n  RemoveLinkModelChangedHandler.prototype.canHandle = function (evt) {\n    return evt.change === gojs_1.ChangedEvent.Remove && evt.propertyName === linkPropertyName;\n  };\n\n  RemoveLinkModelChangedHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    if (model.linkDataArray.some(function (el) {\n      return el.from === evt.oldValue.from && el.to === evt.oldValue.to;\n    })) {\n      diagramNotificationDelegate.enqueueEvent({\n        eventType: modelChangeEvent_1.ModelChangeEventType.Remove,\n        linkData: __assign({}, evt.oldValue),\n        model: getNewModel(evt)\n      });\n    }\n  };\n\n  return RemoveLinkModelChangedHandler;\n}();\n\nexports.RemoveLinkModelChangedHandler = RemoveLinkModelChangedHandler;\n\nvar GroupNodeModelChangedHandler =\n/** @class */\nfunction () {\n  function GroupNodeModelChangedHandler() {}\n\n  GroupNodeModelChangedHandler.prototype.canHandle = function (evt) {\n    return evt.modelChange === 'nodeGroupKey' || evt.modelChange === 'nodeParentKey';\n  };\n\n  GroupNodeModelChangedHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    var data = evt.object;\n    diagramNotificationDelegate.enqueueEvent({\n      eventType: modelChangeEvent_1.ModelChangeEventType.Group,\n      nodeData: __assign({}, data),\n      model: getNewModel(evt)\n    });\n  };\n\n  return GroupNodeModelChangedHandler;\n}();\n\nexports.GroupNodeModelChangedHandler = GroupNodeModelChangedHandler;\n\nvar BeginTransactionHandler =\n/** @class */\nfunction () {\n  function BeginTransactionHandler() {}\n\n  BeginTransactionHandler.prototype.canHandle = function (evt) {\n    return evt.change === gojs_1.ChangedEvent.Transaction && evt.propertyName === 'StartedTransaction';\n  };\n\n  BeginTransactionHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    diagramNotificationDelegate.clear();\n  };\n\n  return BeginTransactionHandler;\n}();\n\nexports.BeginTransactionHandler = BeginTransactionHandler;\n\nvar CommitTransactionHandler =\n/** @class */\nfunction () {\n  function CommitTransactionHandler() {}\n\n  CommitTransactionHandler.prototype.canHandle = function (evt) {\n    return evt.change === gojs_1.ChangedEvent.Transaction && evt.propertyName === 'CommittedTransaction';\n  };\n\n  CommitTransactionHandler.prototype.handle = function (evt, model, diagramNotificationDelegate) {\n    diagramNotificationDelegate.dispatchAll();\n  };\n\n  return CommitTransactionHandler;\n}();\n\nexports.CommitTransactionHandler = CommitTransactionHandler;\n\nvar getNewModel = function (changedEvent) {\n  return {\n    nodeDataArray: changedEvent.model.nodeDataArray.slice(),\n    linkDataArray: changedEvent.model.linkDataArray.slice()\n  };\n};","map":null,"metadata":{},"sourceType":"script"}