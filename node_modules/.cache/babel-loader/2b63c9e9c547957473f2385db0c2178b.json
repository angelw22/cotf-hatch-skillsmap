{"ast":null,"code":"import _defineProperty from \"/Users/angel/Documents/skills_map/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/angel/Documents/skills_map/src/components/diagram.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport * as go from 'gojs';\nimport { ToolManager, Diagram } from 'gojs';\nimport { GojsDiagram, ModelChangeEventType } from 'react-gojs'; // import DiagramButtons from './DiagramButtons';\n\nimport './MyDiagram.css'; // import { getRandomColor } from '../Helpers/ColorHelper';\n\nimport SelectionDetails from './SelectionDetails';\n\nclass MyDiagram extends React.Component {\n  constructor(props) {\n    super(props);\n    this.nodeId = 0;\n    this.createDiagram = this.createDiagram.bind(this);\n    this.modelChangeHandler = this.modelChangeHandler.bind(this);\n    this.initModelHandler = this.initModelHandler.bind(this);\n    this.updateColorHandler = this.updateColorHandler.bind(this);\n    this.nodeSelectionHandler = this.nodeSelectionHandler.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeLink = this.removeLink.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.updateNodeText = this.updateNodeText.bind(this);\n    this.onTextEdited = this.onTextEdited.bind(this);\n    this.state = {\n      selectedNodeKeys: [],\n      model: {\n        nodeDataArray: [{\n          key: 'Alpha',\n          label: 'Alpha',\n          color: 'lightblue'\n        }],\n        linkDataArray: []\n      }\n    };\n  }\n\n  render() {\n    return [// <DiagramButtons\n    //     key=\"diagramButtons\"\n    //     onInit={this.initModelHandler}\n    //     onUpdateColor={this.updateColorHandler}\n    //     onAddNode={this.addNode}\n    // />,\n    React.createElement(SelectionDetails, {\n      key: \"selectionDetails\",\n      selectedNodes: this.state.selectedNodeKeys,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(GojsDiagram, {\n      key: \"gojsDiagram\",\n      diagramId: \"myDiagramDiv\",\n      model: this.state.model,\n      createDiagram: this.createDiagram,\n      className: \"myDiagram\",\n      onModelChange: this.modelChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })];\n  }\n\n  initModelHandler() {\n    this.setState(_objectSpread({}, this.state, {\n      model: {\n        nodeDataArray: [{\n          key: 'Alpha',\n          label: 'Alpha',\n          color: 'lightblue'\n        }, {\n          key: 'Beta',\n          label: 'Beta',\n          color: 'orange'\n        }, {\n          key: 'Gamma',\n          label: 'Gamma',\n          color: 'lightgreen'\n        }, {\n          key: 'Delta',\n          label: 'Delta',\n          color: 'pink'\n        }, {\n          key: 'Omega',\n          label: 'Omega',\n          color: 'grey'\n        }],\n        linkDataArray: [{\n          from: 'Alpha',\n          to: 'Beta'\n        }, {\n          from: 'Alpha',\n          to: 'Gamma'\n        }, {\n          from: 'Beta',\n          to: 'Delta'\n        }, {\n          from: 'Gamma',\n          to: 'Omega'\n        }]\n      }\n    }));\n  }\n\n  updateColorHandler() {\n    const updatedNodes = this.state.model.nodeDataArray.map(node => {\n      return _objectSpread({}, node, {\n        // color: getRandomColor()\n        color: red\n      });\n    });\n    this.setState(_objectSpread({}, this.state, {\n      model: _objectSpread({}, this.state.model, {\n        nodeDataArray: updatedNodes\n      })\n    }));\n  }\n\n  createDiagram(diagramId) {\n    const $ = go.GraphObject.make;\n    const myDiagram = $(go.Diagram, diagramId, {\n      initialContentAlignment: go.Spot.LeftCenter,\n      layout: $(go.TreeLayout, {\n        angle: 0,\n        arrangement: go.TreeLayout.ArrangementVertical,\n        treeStyle: go.TreeLayout.StyleLayered\n      }),\n      isReadOnly: false,\n      allowHorizontalScroll: true,\n      allowVerticalScroll: true,\n      allowZoom: false,\n      allowSelect: true,\n      autoScale: Diagram.Uniform,\n      contentAlignment: go.Spot.LeftCenter,\n      TextEdited: this.onTextEdited\n    });\n    myDiagram.toolManager.panningTool.isEnabled = false;\n    myDiagram.toolManager.mouseWheelBehavior = ToolManager.WheelScroll;\n    myDiagram.nodeTemplate = $(go.Node, 'Auto', {\n      selectionChanged: node => this.nodeSelectionHandler(node.key, node.isSelected)\n    }, $(go.Shape, 'RoundedRectangle', {\n      strokeWidth: 0\n    }, new go.Binding('fill', 'color')), $(go.TextBlock, {\n      margin: 8,\n      editable: true\n    }, new go.Binding('text', 'label')));\n    return myDiagram;\n  }\n\n  modelChangeHandler(event) {\n    switch (event.eventType) {\n      case ModelChangeEventType.Remove:\n        if (event.nodeData) {\n          this.removeNode(event.nodeData.key);\n        }\n\n        if (event.linkData) {\n          this.removeLink(event.linkData);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  addNode() {\n    const newNodeId = 'node' + this.nodeId;\n    const linksToAdd = this.state.selectedNodeKeys.map(parent => {\n      return {\n        from: parent,\n        to: newNodeId\n      };\n    });\n    this.setState(_objectSpread({}, this.state, {\n      model: _objectSpread({}, this.state.model, {\n        nodeDataArray: [...this.state.model.nodeDataArray, {\n          key: newNodeId,\n          label: newNodeId,\n          // color: getRandomColor() \n          color: red\n        }],\n        linkDataArray: linksToAdd.length > 0 ? [...this.state.model.linkDataArray].concat(linksToAdd) : [...this.state.model.linkDataArray]\n      })\n    }));\n    this.nodeId += 1;\n  }\n\n  removeNode(nodeKey) {\n    const nodeToRemoveIndex = this.state.model.nodeDataArray.findIndex(node => node.key === nodeKey);\n\n    if (nodeToRemoveIndex === -1) {\n      return;\n    }\n\n    this.setState(_objectSpread({}, this.state, {\n      model: _objectSpread({}, this.state.model, {\n        nodeDataArray: [...this.state.model.nodeDataArray.slice(0, nodeToRemoveIndex), ...this.state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)]\n      })\n    }));\n  }\n\n  removeLink(linKToRemove) {\n    const linkToRemoveIndex = this.state.model.linkDataArray.findIndex(link => link.from === linKToRemove.from && link.to === linKToRemove.to);\n\n    if (linkToRemoveIndex === -1) {\n      return;\n    }\n\n    return _objectSpread({}, this.state, {\n      model: _objectSpread({}, this.state.model, {\n        linkDataArray: [...this.state.model.linkDataArray.slice(0, linkToRemoveIndex), ...this.state.model.linkDataArray.slice(linkToRemoveIndex + 1)]\n      })\n    });\n  }\n\n  updateNodeText(nodeKey, text) {\n    const nodeToUpdateIndex = this.state.model.nodeDataArray.findIndex(node => node.key === nodeKey);\n\n    if (nodeToUpdateIndex === -1) {\n      return;\n    }\n\n    this.setState(_objectSpread({}, this.state, {\n      model: _objectSpread({}, this.state.model, {\n        nodeDataArray: [...this.state.model.nodeDataArray.slice(0, nodeToUpdateIndex), _objectSpread({}, this.state.model.nodeDataArray[nodeToUpdateIndex], {\n          label: text\n        }), ...this.state.model.nodeDataArray.slice(nodeToUpdateIndex + 1)]\n      })\n    }));\n  }\n\n  nodeSelectionHandler(nodeKey, isSelected) {\n    if (isSelected) {\n      this.setState(_objectSpread({}, this.state, {\n        selectedNodeKeys: [...this.state.selectedNodeKeys, nodeKey]\n      }));\n    } else {\n      const nodeIndexToRemove = this.state.selectedNodeKeys.findIndex(key => key === nodeKey);\n\n      if (nodeIndexToRemove === -1) {\n        return;\n      }\n\n      this.setState(_objectSpread({}, this.state, {\n        selectedNodeKeys: [...this.state.selectedNodeKeys.slice(0, nodeIndexToRemove), ...this.state.selectedNodeKeys.slice(nodeIndexToRemove + 1)]\n      }));\n    }\n  }\n\n  onTextEdited(e) {\n    const tb = e.subject;\n\n    if (tb === null) {\n      return;\n    }\n\n    const node = tb.part;\n\n    if (node instanceof go.Node) {\n      this.updateNodeText(node.key, tb.text);\n    }\n  }\n\n}\n\nexport default MyDiagram;","map":{"version":3,"sources":["/Users/angel/Documents/skills_map/src/components/diagram.js"],"names":["React","go","ToolManager","Diagram","GojsDiagram","ModelChangeEventType","SelectionDetails","MyDiagram","Component","constructor","props","nodeId","createDiagram","bind","modelChangeHandler","initModelHandler","updateColorHandler","nodeSelectionHandler","removeNode","removeLink","addNode","updateNodeText","onTextEdited","state","selectedNodeKeys","model","nodeDataArray","key","label","color","linkDataArray","render","setState","from","to","updatedNodes","map","node","red","diagramId","$","GraphObject","make","myDiagram","initialContentAlignment","Spot","LeftCenter","layout","TreeLayout","angle","arrangement","ArrangementVertical","treeStyle","StyleLayered","isReadOnly","allowHorizontalScroll","allowVerticalScroll","allowZoom","allowSelect","autoScale","Uniform","contentAlignment","TextEdited","toolManager","panningTool","isEnabled","mouseWheelBehavior","WheelScroll","nodeTemplate","Node","selectionChanged","isSelected","Shape","strokeWidth","Binding","TextBlock","margin","editable","event","eventType","Remove","nodeData","linkData","newNodeId","linksToAdd","parent","length","concat","nodeKey","nodeToRemoveIndex","findIndex","slice","linKToRemove","linkToRemoveIndex","link","text","nodeToUpdateIndex","nodeIndexToRemove","e","tb","subject","part"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as go from 'gojs';\nimport { ToolManager, Diagram } from 'gojs';\nimport { GojsDiagram, ModelChangeEventType } from 'react-gojs';\n// import DiagramButtons from './DiagramButtons';\nimport './MyDiagram.css';\n// import { getRandomColor } from '../Helpers/ColorHelper';\nimport SelectionDetails from './SelectionDetails';\n\nclass MyDiagram extends React.Component {\n    nodeId = 0;\n\n    constructor(props) {\n        super(props);\n        this.createDiagram = this.createDiagram.bind(this);\n        this.modelChangeHandler = this.modelChangeHandler.bind(this);\n        this.initModelHandler = this.initModelHandler.bind(this);\n        this.updateColorHandler = this.updateColorHandler.bind(this);\n        this.nodeSelectionHandler = this.nodeSelectionHandler.bind(this);\n        this.removeNode = this.removeNode.bind(this);\n        this.removeLink = this.removeLink.bind(this);\n        this.addNode = this.addNode.bind(this);\n        this.updateNodeText = this.updateNodeText.bind(this);\n        this.onTextEdited = this.onTextEdited.bind(this);\n        this.state = {\n            selectedNodeKeys: [],\n            model: {\n                nodeDataArray: [{ key: 'Alpha', label: 'Alpha', color: 'lightblue' }],\n                linkDataArray: []\n            }\n        };\n    }\n\n    render() {\n        return [\n            // <DiagramButtons\n            //     key=\"diagramButtons\"\n            //     onInit={this.initModelHandler}\n            //     onUpdateColor={this.updateColorHandler}\n            //     onAddNode={this.addNode}\n            // />,\n            <SelectionDetails key=\"selectionDetails\" selectedNodes={this.state.selectedNodeKeys} />,\n            <GojsDiagram\n                key=\"gojsDiagram\"\n                diagramId=\"myDiagramDiv\"\n                model={this.state.model}\n                createDiagram={this.createDiagram}\n                className=\"myDiagram\"\n                onModelChange={this.modelChangeHandler}\n            />\n        ];\n    }\n\n    initModelHandler() {\n        this.setState({\n            ...this.state,\n            model: {\n                nodeDataArray: [\n                    { key: 'Alpha', label: 'Alpha', color: 'lightblue' },\n                    { key: 'Beta', label: 'Beta', color: 'orange' },\n                    { key: 'Gamma', label: 'Gamma', color: 'lightgreen' },\n                    { key: 'Delta', label: 'Delta', color: 'pink' },\n                    { key: 'Omega', label: 'Omega', color: 'grey' }\n                ],\n                linkDataArray: [\n                    { from: 'Alpha', to: 'Beta' },\n                    { from: 'Alpha', to: 'Gamma' },\n                    { from: 'Beta', to: 'Delta' },\n                    { from: 'Gamma', to: 'Omega' }\n                ]\n            }\n        });\n    }\n\n    updateColorHandler() {\n        const updatedNodes = this.state.model.nodeDataArray.map(node => {\n            return {\n                ...node,\n                // color: getRandomColor()\n                color: red\n            };\n        });\n\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: updatedNodes\n            }\n        });\n    }\n\n    createDiagram(diagramId: string) {\n        const $ = go.GraphObject.make;\n\n        const myDiagram = $(go.Diagram, diagramId, {\n            initialContentAlignment: go.Spot.LeftCenter,\n            layout: $(go.TreeLayout, {\n                angle: 0,\n                arrangement: go.TreeLayout.ArrangementVertical,\n                treeStyle: go.TreeLayout.StyleLayered\n            }),\n            isReadOnly: false,\n            allowHorizontalScroll: true,\n            allowVerticalScroll: true,\n            allowZoom: false,\n            allowSelect: true,\n            autoScale: Diagram.Uniform,\n            contentAlignment: go.Spot.LeftCenter,\n            TextEdited: this.onTextEdited\n        });\n\n        myDiagram.toolManager.panningTool.isEnabled = false;\n        myDiagram.toolManager.mouseWheelBehavior = ToolManager.WheelScroll;\n\n        myDiagram.nodeTemplate = $(\n            go.Node,\n            'Auto',\n            {\n                selectionChanged: node => this.nodeSelectionHandler(node.key, node.isSelected)\n            },\n            $(go.Shape, 'RoundedRectangle', { strokeWidth: 0 }, new go.Binding('fill', 'color')),\n            $(go.TextBlock, { margin: 8, editable: true }, new go.Binding('text', 'label'))\n        );\n\n        return myDiagram;\n    }\n\n    modelChangeHandler(event) {\n        switch (event.eventType) {\n            case ModelChangeEventType.Remove:\n                if (event.nodeData) {\n                    this.removeNode(event.nodeData.key);\n                }\n                if (event.linkData) {\n                    this.removeLink(event.linkData);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    addNode() {\n        const newNodeId = 'node' + this.nodeId;\n        const linksToAdd = this.state.selectedNodeKeys.map(parent => {\n            return { from: parent, to: newNodeId };\n        });\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: [\n                    ...this.state.model.nodeDataArray,\n                    { key: newNodeId, label: newNodeId, \n                        // color: getRandomColor() \n                        color: red\n                    }\n                ],\n                linkDataArray:\n                    linksToAdd.length > 0\n                        ? [...this.state.model.linkDataArray].concat(linksToAdd)\n                        : [...this.state.model.linkDataArray]\n            }\n        });\n        this.nodeId += 1;\n    }\n\n    removeNode(nodeKey) {\n        const nodeToRemoveIndex = this.state.model.nodeDataArray.findIndex(node => node.key === nodeKey);\n        if (nodeToRemoveIndex === -1) {\n            return;\n        }\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: [\n                    ...this.state.model.nodeDataArray.slice(0, nodeToRemoveIndex),\n                    ...this.state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)\n                ]\n            }\n        });\n    }\n\n    removeLink(linKToRemove) {\n        const linkToRemoveIndex = this.state.model.linkDataArray.findIndex(\n            link => link.from === linKToRemove.from && link.to === linKToRemove.to\n        );\n        if (linkToRemoveIndex === -1) {\n            return;\n        }\n        return {\n            ...this.state,\n            model: {\n                ...this.state.model,\n                linkDataArray: [\n                    ...this.state.model.linkDataArray.slice(0, linkToRemoveIndex),\n                    ...this.state.model.linkDataArray.slice(linkToRemoveIndex + 1)\n                ]\n            }\n        };\n    }\n\n    updateNodeText(nodeKey, text) {\n        const nodeToUpdateIndex = this.state.model.nodeDataArray.findIndex(node => node.key === nodeKey);\n        if (nodeToUpdateIndex === -1) {\n            return;\n        }\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: [\n                    ...this.state.model.nodeDataArray.slice(0, nodeToUpdateIndex),\n                    {\n                        ...this.state.model.nodeDataArray[nodeToUpdateIndex],\n                        label: text\n                    },\n                    ...this.state.model.nodeDataArray.slice(nodeToUpdateIndex + 1)\n                ]\n            }\n        });\n    }\n\n    nodeSelectionHandler(nodeKey, isSelected) {\n        if (isSelected) {\n            this.setState({\n                ...this.state,\n                selectedNodeKeys: [...this.state.selectedNodeKeys, nodeKey]\n            });\n        } else {\n            const nodeIndexToRemove = this.state.selectedNodeKeys.findIndex(key => key === nodeKey);\n            if (nodeIndexToRemove === -1) {\n                return;\n            }\n            this.setState({\n                ...this.state,\n                selectedNodeKeys: [\n                    ...this.state.selectedNodeKeys.slice(0, nodeIndexToRemove),\n                    ...this.state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\n                ]\n            });\n        }\n    }\n\n    onTextEdited(e) {\n        const tb = e.subject;\n        if (tb === null) {\n            return;\n        }\n        const node = tb.part;\n        if (node instanceof go.Node) {\n            this.updateNodeText(node.key, tb.text);\n        }\n    }\n}\n\nexport default MyDiagram;"]},"metadata":{},"sourceType":"module"}